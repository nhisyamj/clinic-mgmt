/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.nhisyamj.clinic.api;

import com.nhisyamj.clinic.model.Order;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-10-11T19:00:11.469Z")

@Api(value = "order", description = "the order API")
public interface OrderApi {

    @ApiOperation(value = "Create order", nickname = "addOrder", notes = "", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created") })
    @RequestMapping(value = "/order",
        method = RequestMethod.POST)
    ResponseEntity<Void> addOrder(@ApiParam(value = "") @Valid @RequestBody Order body);


    @ApiOperation(value = "Add result", nickname = "addPdfResult", notes = "", tags={ "pdf result", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created") })
    @RequestMapping(value = "/order/result/pdf",
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addPdfResult(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile pdfResult);


    @ApiOperation(value = "Get order", nickname = "getOrder", notes = "", response = Order.class, tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Order.class) })
    @RequestMapping(value = "/order",
        produces = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Order> getOrder();


    @ApiOperation(value = "Get result", nickname = "getPdfResult", notes = "", response = Resource.class, tags={ "pdf result", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Resource.class) })
    @RequestMapping(value = "/order/result/pdf",
        produces = { "multipart/form-data" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> getPdfResult();


    @ApiOperation(value = "Update order", nickname = "updateOrder", notes = "", tags={ "order", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    @RequestMapping(value = "/order",
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateOrder();


    @ApiOperation(value = "Update result", nickname = "updatePdfResult", notes = "", tags={ "pdf result", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "No Content") })
    @RequestMapping(value = "/order/result/pdf",
        consumes = { "multipart/form-data" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updatePdfResult(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile pdfResult);

}
